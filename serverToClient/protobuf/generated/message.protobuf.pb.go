// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.protobuf

package s2cProtobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Message struct {
	Id int64 `protobuf:"varint,1,opt,name=Id,json=id,proto3" json:"Id,omitempty"`
	// Types that are valid to be assigned to Message:
	//	*Message_Error
	//	*Message_Ping
	//	*Message_Pong
	//	*Message_Connect
	//	*Message_Connected
	Message isMessage_Message `protobuf_oneof:"Message"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptorMessagebuf, []int{0} }

type isMessage_Message interface {
	isMessage_Message()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Message_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=Error,json=error,oneof"`
}
type Message_Ping struct {
	Ping *Ping `protobuf:"bytes,3,opt,name=Ping,json=ping,oneof"`
}
type Message_Pong struct {
	Pong *Pong `protobuf:"bytes,4,opt,name=Pong,json=pong,oneof"`
}
type Message_Connect struct {
	Connect *Connect `protobuf:"bytes,5,opt,name=Connect,json=connect,oneof"`
}
type Message_Connected struct {
	Connected *Connected `protobuf:"bytes,6,opt,name=Connected,json=connected,oneof"`
}

func (*Message_Error) isMessage_Message()     {}
func (*Message_Ping) isMessage_Message()      {}
func (*Message_Pong) isMessage_Message()      {}
func (*Message_Connect) isMessage_Message()   {}
func (*Message_Connected) isMessage_Message() {}

func (m *Message) GetMessage() isMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Message) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Message) GetError() *Error {
	if x, ok := m.GetMessage().(*Message_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Message) GetPing() *Ping {
	if x, ok := m.GetMessage().(*Message_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *Message) GetPong() *Pong {
	if x, ok := m.GetMessage().(*Message_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *Message) GetConnect() *Connect {
	if x, ok := m.GetMessage().(*Message_Connect); ok {
		return x.Connect
	}
	return nil
}

func (m *Message) GetConnected() *Connected {
	if x, ok := m.GetMessage().(*Message_Connected); ok {
		return x.Connected
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Error)(nil),
		(*Message_Ping)(nil),
		(*Message_Pong)(nil),
		(*Message_Connect)(nil),
		(*Message_Connected)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// Message
	switch x := m.Message.(type) {
	case *Message_Error:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Message_Ping:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *Message_Pong:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pong); err != nil {
			return err
		}
	case *Message_Connect:
		_ = b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Connect); err != nil {
			return err
		}
	case *Message_Connected:
		_ = b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Connected); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Message has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 2: // Message.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Error{msg}
		return true, err
	case 3: // Message.Ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Ping{msg}
		return true, err
	case 4: // Message.Pong
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pong)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Pong{msg}
		return true, err
	case 5: // Message.Connect
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Connect)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Connect{msg}
		return true, err
	case 6: // Message.Connected
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Connected)
		err := b.DecodeMessage(msg)
		m.Message = &Message_Connected{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// Message
	switch x := m.Message.(type) {
	case *Message_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Pong:
		s := proto.Size(x.Pong)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Connect:
		s := proto.Size(x.Connect)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Connected:
		s := proto.Size(x.Connected)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Message)(nil), "s2cProtobuf.Message")
}
func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Id))
	}
	if m.Message != nil {
		nn1, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *Message_Error) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Error != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Error.Size()))
		n2, err := m.Error.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func (m *Message_Ping) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Ping != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Ping.Size()))
		n3, err := m.Ping.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}
func (m *Message_Pong) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Pong != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Pong.Size()))
		n4, err := m.Pong.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}
func (m *Message_Connect) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Connect != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Connect.Size()))
		n5, err := m.Connect.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}
func (m *Message_Connected) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Connected != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintMessagebuf(dAtA, i, uint64(m.Connected.Size()))
		n6, err := m.Connected.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}
func encodeVarintMessagebuf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovMessagebuf(uint64(m.Id))
	}
	if m.Message != nil {
		n += m.Message.Size()
	}
	return n
}

func (m *Message_Error) Size() (n int) {
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.Size()
		n += 1 + l + sovMessagebuf(uint64(l))
	}
	return n
}
func (m *Message_Ping) Size() (n int) {
	var l int
	_ = l
	if m.Ping != nil {
		l = m.Ping.Size()
		n += 1 + l + sovMessagebuf(uint64(l))
	}
	return n
}
func (m *Message_Pong) Size() (n int) {
	var l int
	_ = l
	if m.Pong != nil {
		l = m.Pong.Size()
		n += 1 + l + sovMessagebuf(uint64(l))
	}
	return n
}
func (m *Message_Connect) Size() (n int) {
	var l int
	_ = l
	if m.Connect != nil {
		l = m.Connect.Size()
		n += 1 + l + sovMessagebuf(uint64(l))
	}
	return n
}
func (m *Message_Connected) Size() (n int) {
	var l int
	_ = l
	if m.Connected != nil {
		l = m.Connected.Size()
		n += 1 + l + sovMessagebuf(uint64(l))
	}
	return n
}

func sovMessagebuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessagebuf(x uint64) (n int) {
	return sovMessagebuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessagebuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagebuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Error{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Error{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ping", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagebuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Ping{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Ping{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pong", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagebuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Pong{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Pong{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connect", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagebuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Connect{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Connect{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Connected", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessagebuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Connected{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Message = &Message_Connected{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessagebuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessagebuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessagebuf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessagebuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessagebuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessagebuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessagebuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessagebuf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessagebuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessagebuf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.protobuf", fileDescriptorMessagebuf) }

var fileDescriptorMessagebuf = []byte{
	// 250 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0x4d, 0x2d, 0x2e,
	0x4e, 0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a, 0x4d, 0x13, 0xe2, 0x2e, 0x36,
	0x4a, 0x0e, 0x80, 0x72, 0xa4, 0xf8, 0x52, 0x8b, 0x8a, 0xf2, 0x8b, 0xe0, 0x92, 0x52, 0xbc, 0x05,
	0x99, 0x79, 0xe9, 0xc8, 0xdc, 0x7c, 0x64, 0xae, 0x40, 0x72, 0x7e, 0x5e, 0x5e, 0x6a, 0x72, 0x09,
	0x42, 0x44, 0x08, 0x2a, 0x92, 0x9a, 0x02, 0x17, 0x53, 0xea, 0x61, 0xe2, 0x62, 0xf7, 0x85, 0xd8,
	0x2a, 0xc4, 0xc7, 0xc5, 0xe4, 0x99, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1c, 0xc4, 0x94, 0x99,
	0x22, 0xa4, 0xc5, 0xc5, 0xea, 0x0a, 0xb2, 0x51, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x48,
	0x0f, 0xc9, 0x31, 0x7a, 0x60, 0x19, 0x0f, 0x86, 0x20, 0x56, 0xb0, 0xa3, 0x84, 0xd4, 0xb9, 0x58,
	0x02, 0x32, 0xf3, 0xd2, 0x25, 0x98, 0xc1, 0x4a, 0x05, 0x51, 0x94, 0x82, 0x24, 0x3c, 0x18, 0x82,
	0x58, 0x40, 0xce, 0x05, 0x2b, 0xcc, 0xcf, 0x4b, 0x97, 0x60, 0xc1, 0xa6, 0x30, 0x1f, 0xaa, 0x30,
	0x3f, 0x2f, 0x5d, 0xc8, 0x80, 0x8b, 0xdd, 0x19, 0xe2, 0x5e, 0x09, 0x56, 0xb0, 0x5a, 0x11, 0x14,
	0xb5, 0x50, 0x39, 0x0f, 0x86, 0x20, 0x76, 0xa8, 0xb7, 0x84, 0xcc, 0xb8, 0x38, 0x9d, 0x61, 0x3e,
	0x94, 0x60, 0x03, 0xeb, 0x11, 0xc3, 0xa6, 0x27, 0x35, 0xc5, 0x83, 0x21, 0x88, 0x13, 0x1e, 0x18,
	0x4e, 0x9c, 0xf0, 0x20, 0x70, 0x12, 0x38, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07,
	0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x48, 0x62, 0x03, 0x07, 0x95, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x2f, 0xdb, 0x54, 0xa0, 0x9c, 0x01, 0x00, 0x00,
}
