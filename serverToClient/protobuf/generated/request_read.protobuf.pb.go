// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: request_read.protobuf

package s2cProtobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestRead struct {
	Path string `protobuf:"bytes,1,opt,name=Path,json=path,proto3" json:"Path,omitempty"`
	// Types that are valid to be assigned to RequestRead:
	//	*RequestRead_OpenDir
	RequestRead isRequestRead_RequestRead `protobuf_oneof:"RequestRead"`
}

func (m *RequestRead) Reset()                    { *m = RequestRead{} }
func (m *RequestRead) String() string            { return proto.CompactTextString(m) }
func (*RequestRead) ProtoMessage()               {}
func (*RequestRead) Descriptor() ([]byte, []int) { return fileDescriptorRequestReadbuf, []int{0} }

type isRequestRead_RequestRead interface {
	isRequestRead_RequestRead()
	MarshalTo([]byte) (int, error)
	Size() int
}

type RequestRead_OpenDir struct {
	OpenDir *OpenDir `protobuf:"bytes,2,opt,name=OpenDir,json=openDir,oneof"`
}

func (*RequestRead_OpenDir) isRequestRead_RequestRead() {}

func (m *RequestRead) GetRequestRead() isRequestRead_RequestRead {
	if m != nil {
		return m.RequestRead
	}
	return nil
}

func (m *RequestRead) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *RequestRead) GetOpenDir() *OpenDir {
	if x, ok := m.GetRequestRead().(*RequestRead_OpenDir); ok {
		return x.OpenDir
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*RequestRead) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _RequestRead_OneofMarshaler, _RequestRead_OneofUnmarshaler, _RequestRead_OneofSizer, []interface{}{
		(*RequestRead_OpenDir)(nil),
	}
}

func _RequestRead_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*RequestRead)
	// RequestRead
	switch x := m.RequestRead.(type) {
	case *RequestRead_OpenDir:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.OpenDir); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("RequestRead.RequestRead has unexpected type %T", x)
	}
	return nil
}

func _RequestRead_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*RequestRead)
	switch tag {
	case 2: // RequestRead.OpenDir
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(OpenDir)
		err := b.DecodeMessage(msg)
		m.RequestRead = &RequestRead_OpenDir{msg}
		return true, err
	default:
		return false, nil
	}
}

func _RequestRead_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*RequestRead)
	// RequestRead
	switch x := m.RequestRead.(type) {
	case *RequestRead_OpenDir:
		s := proto.Size(x.OpenDir)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*RequestRead)(nil), "s2cProtobuf.RequestRead")
}
func (m *RequestRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestRead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Path) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRequestReadbuf(dAtA, i, uint64(len(m.Path)))
		i += copy(dAtA[i:], m.Path)
	}
	if m.RequestRead != nil {
		nn1, err := m.RequestRead.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn1
	}
	return i, nil
}

func (m *RequestRead_OpenDir) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.OpenDir != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRequestReadbuf(dAtA, i, uint64(m.OpenDir.Size()))
		n2, err := m.OpenDir.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}
func encodeVarintRequestReadbuf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RequestRead) Size() (n int) {
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRequestReadbuf(uint64(l))
	}
	if m.RequestRead != nil {
		n += m.RequestRead.Size()
	}
	return n
}

func (m *RequestRead_OpenDir) Size() (n int) {
	var l int
	_ = l
	if m.OpenDir != nil {
		l = m.OpenDir.Size()
		n += 1 + l + sovRequestReadbuf(uint64(l))
	}
	return n
}

func sovRequestReadbuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRequestReadbuf(x uint64) (n int) {
	return sovRequestReadbuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RequestRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequestReadbuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestReadbuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequestReadbuf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenDir", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequestReadbuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRequestReadbuf
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OpenDir{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.RequestRead = &RequestRead_OpenDir{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequestReadbuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRequestReadbuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequestReadbuf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequestReadbuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestReadbuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequestReadbuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRequestReadbuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRequestReadbuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRequestReadbuf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRequestReadbuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequestReadbuf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("request_read.protobuf", fileDescriptorRequestReadbuf) }

var fileDescriptorRequestReadbuf = []byte{
	// 158 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x89, 0x2f, 0x4a, 0x4d, 0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x2a,
	0x4d, 0x13, 0xe2, 0x2e, 0x36, 0x4a, 0x0e, 0x80, 0x72, 0xa4, 0x04, 0xf3, 0x0b, 0x52, 0xf3, 0xe2,
	0x53, 0x32, 0x8b, 0xe0, 0xf2, 0x4a, 0x49, 0x5c, 0xdc, 0x41, 0x10, 0x8d, 0x41, 0xa9, 0x89, 0x29,
	0x42, 0x42, 0x5c, 0x2c, 0x01, 0x89, 0x25, 0x19, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x2c,
	0x05, 0x89, 0x25, 0x19, 0x42, 0x06, 0x5c, 0xec, 0xfe, 0x05, 0xa9, 0x79, 0x2e, 0x99, 0x45, 0x12,
	0x4c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x48, 0x86, 0xea, 0x41, 0xe5, 0x3c, 0x18, 0x82,
	0xd8, 0xf3, 0x21, 0x4c, 0x27, 0x5e, 0x14, 0x43, 0x9d, 0x04, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0,
	0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0x92, 0xd8, 0xc0, 0xf6, 0x1b,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x17, 0x97, 0x5d, 0x2f, 0xb5, 0x00, 0x00, 0x00,
}
